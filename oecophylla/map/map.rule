
rule map_simplify_fasta_headers:
    input:
        assemble_dir + "{bin_sample}/{assembler}/{bin_sample}.contigs.fa"
    output:
        fasta = assemble_dir + "{bin_sample}/{assembler}/{bin_sample}.contigs.simple.fa",
        headers = assemble_dir + "{bin_sample}/{assembler}/{bin_sample}.contigs.headers.txt"
    log:
        assemble_dir + "logs/assemble_simplify_fasta_headers.sample_{bin_sample}.log"
    threads:
        1
    run:
        prepend = '{0}_{1}_contig_'.format(wildcards.bin_sample,
                                           config['params']['mapping_assembler'])

        simplify_headers(input[0], prepend=prepend,
                         output_fp=output.fasta, header_fp=output.headers)


rule map_bowtie2_index:
    input:
        assemble_dir + "{bin_sample}/%s/{bin_sample}.contigs.simple.fa" % config['params']['mapping_assembler']
    output:
        touch(map_dir + "{bin_sample}/mapping/{bin_sample}.done")
    log:
        map_dir + "logs/map_bowtie2_index.sample_{bin_sample}.log"
    benchmark:
        "benchmarks/map/map_bowtie2_index.sample_{bin_sample}.txt"
    threads:
        4
    params:
        env = config['envs']['map']
    run:
        outdir = os.path.dirname(output[0])
        shell("""
              set +u; {params.env}; set -u;

              bowtie2-build {input} {outdir}/{wildcards.bin_sample} 2> {log} 1>&2""")


rule map_bowtie2:
    input:
        idx = rules.map_bowtie2_index.output,
        forward = lambda wildcards: rules.qc_filter.output.forward.format(sample=wildcards.abund_sample),
        reverse = lambda wildcards: rules.qc_filter.output.reverse.format(sample=wildcards.abund_sample)
    output:
        bam = map_dir + "{bin_sample}/mapping/{bin_sample}_{abund_sample}.bam",
        bai = map_dir + "{bin_sample}/mapping/{bin_sample}_{abund_sample}.bam.bai"
    log:
        bowtie = map_dir + "logs/map_bowtie2.sample_{bin_sample}.abund_sample_{abund_sample}.bowtie.log",
        other = map_dir + "logs/map_bowtie2.sample_{bin_sample}.abund_sample_{abund_sample}.other.log"
    benchmark:
        "benchmarks/map/map_bowtie2.sample_{bin_sample}.abund_sample_{abund_sample}.txt"
    threads:
        4
    params:
        env = config['envs']['map']
    run:
        with tempfile.TemporaryDirectory(dir=find_local_scratch(TMP_DIR_ROOT)) as temp_dir:
            idx_base = os.path.join(os.path.dirname(input.idx[0]),
                                    wildcards.bin_sample)
            shell("""
                    set +u; {params.env}; set -u;

                    bowtie2 -x {idx_base} -p {threads} --no-unal \
                    -q -1 {input.forward} -2 {input.reverse} 2> {log.bowtie} | \
                    samtools sort -O bam -l 0 -T {temp_dir} -o {temp_dir}/out.bam 2> {log.other}

                    samtools index {temp_dir}/out.bam

                    scp {temp_dir}/out.bam {output.bam}
                    scp {temp_dir}/out.bam.bai {output.bai}
                  """)


rule map_sample:
    input:
        lambda wildcards: expand(map_dir + "{bin_sample}/mapping/{bin_sample}_{abund_sample}.bam",
               abund_sample=bin_config[wildcards.bin_sample],
               bin_sample=wildcards.bin_sample)
    output:
        touch(map_dir + "{bin_sample}/mapping/{bin_sample}.mapping.done")


rule map:
    input:
        expand(rules.map_sample.output, bin_sample=bin_config.keys())

