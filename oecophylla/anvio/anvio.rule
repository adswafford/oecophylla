rule anvi_gen_contigs_database:
    input:
        rules.map_bowtie2_index.input
    output:
        db = anvio_dir + "{bin_sample}/{bin_sample}.db",
        h5 =  anvio_dir + "{bin_sample}/{bin_sample}.h5",
        done = touch(anvio_dir + "{bin_sample}/{bin_sample}.anvi_gen_contigs_database.done")
    threads:
        4
    params:
        env = config['envs']['anvio']
    log:
        anvio_dir + "logs/anvi_gen_contigs_database.sample_{bin_sample}.log"
    benchmark:
        "benchmarks/anvio/anvi_gen_contigs_database.sample_{bin_sample}.txt"
    run:
        with tempfile.TemporaryDirectory(dir=find_local_scratch(TMP_DIR_ROOT)) as temp_dir:
            dbname = os.path.basename(output.db)
            h5name = os.path.basename(output.h5)
            shell("""
                    set +u; {params.env}; set -u

                    anvi-gen-contigs-database -f {input} -o {temp_dir}/{dbname} 2> {log} 1>&2

                    scp {temp_dir}/{dbname} {output.db}
                    scp {temp_dir}/{h5name} {output.h5}
                  """)


rule anvi_run_hmms:
    input:
        rules.anvi_gen_contigs_database.output
    output:
        done = touch(anvio_dir + "{bin_sample}/{bin_sample}.db.run-hmms.done")
    threads:
        12
    params:
        env = config['envs']['anvio']
    log:
        anvio_dir + "logs/anvi_run_hmms.sample_{bin_sample}.log"
    benchmark:
        "benchmarks/anvio/anvi_run_hmms.sample_{bin_sample}.txt"
    run:
        shell("""
                set +u; {params.env}; set -u

                anvi-run-hmms -c {input.db} --num-threads {threads} 2> {log} 1>&2
              """)


rule anvi_export_gene_calls:
    input:
        db = rules.anvi_gen_contigs_database.output.db,
        hmm_done = rules.anvi_run_hmms.output.done
    output:
        gene_calls = anvio_dir + "{bin_sample}/{bin_sample}.gene-calls.fa"
    log:
        anvio_dir + "logs/anvi_export_gene_calls.sample_{bin_sample}.log"
    benchmark:
        "benchmarks/anvio/anvi_export_gene_calls.sample_{bin_sample}.txt"
    params:
        env = config['envs']['anvio']
    run:
        with tempfile.TemporaryDirectory(dir=find_local_scratch(TMP_DIR_ROOT)) as temp_dir:
            out_name = os.path.basename(output.gene_calls)
            shell("""
                    set +u; {params.env}; set -u

                    anvi-get-dna-sequences-for-gene-calls -c {input.db} -o {temp_dir}/{out_name} 2> {log} 1>&2

                    scp {temp_dir}/{out_name} {output.gene_calls}
                  """)


rule anvi_run_centrifuge:
    input:
        fa = rules.anvi_export_gene_calls.output.gene_calls,
        db = rules.anvi_gen_contigs_database.output.db
    output:
        hits = anvio_dir + "{bin_sample}/centrifuge_hits.tsv",
        report = anvio_dir + "{bin_sample}/centrifuge_report.tsv"
    log:
        anvio_dir + "logs/anvi_run_centrifuge.sample_{bin_sample}.log"
    benchmark:
        "benchmarks/anvio/anvi_run_centrifuge.sample_{bin_sample}.txt"
    params:
        centrifuge_db = config['params']['centrifuge']['db'],
        anvi_env = config['envs']['anvio'],
        cent_env = config['envs']['centrifuge']
    threads:
        12
    run:
        with tempfile.TemporaryDirectory(dir=find_local_scratch(TMP_DIR_ROOT)) as temp_dir:
            hits_name = os.path.basename(output.hits)
            report_name = os.path.basename(output.report)
            shell("""
                    set +u; {params.cent_env}; set -u

                    centrifuge -f --threads {threads} \
                    -x {params.centrifuge_db} \
                    {input.fa} \
                    -S {temp_dir}/{hits_name} \
                    --report-file {temp_dir}/{report_name}

                    scp {temp_dir}/{hits_name} {output.hits}
                    scp {temp_dir}/{report_name} {output.report}

                    set +u; {params.cent_env}; set -u

                    anvi-import-taxonomy -c {input.db} \
                    -i {output.report} {output.hits} \
                    -p centrifuge
                  """)

rule anvi_profile:
    input:
        bam = rules.map_bowtie2.output.bam,
        bai = rules.map_bowtie2.output.bai,
        db = rules.anvi_gen_contigs_database.output.db,
        hits = rules.anvi_run_centrifuge.output.hits
    output:
        aux = anvio_dir + "{bin_sample}/{bin_sample}.{abund_sample}.bam-ANVIO_PROFILE/AUXILIARY-DATA.h5",
        prof = anvio_dir + "{bin_sample}/{bin_sample}.{abund_sample}.bam-ANVIO_PROFILE/PROFILE.db",
        log = anvio_dir + "{bin_sample}/{bin_sample}.{abund_sample}.bam-ANVIO_PROFILE/RUNLOG.txt"
    log:
        anvio_dir + "logs/anvi_profile.sample_{bin_sample}.abund_sample_{abund_sample}.log"
    benchmark:
        "benchmarks/anvio/anvi_profile.sample_{bin_sample}.abund_sample_{abund_sample}.txt"
    threads:
        12
    params:
        env = config['envs']['anvio']
    run:
        with tempfile.TemporaryDirectory(dir=find_local_scratch(TMP_DIR_ROOT)) as temp_dir:
            prof_dir = os.path.dirname(output.prof)
            shell("""
                    set +u; {params.env}; set -u

                    scp {input.bam} {temp_dir}/{wildcards.bin_sample}_{wildcards.abund_sample}.bam
                    scp {input.bai} {temp_dir}/{wildcards.bin_sample}_{wildcards.abund_sample}.bam.bai

                    anvi-profile -i {temp_dir}/{wildcards.bin_sample}_{wildcards.abund_sample}.bam \
                    --num-threads {threads} --write-buffer-size 1000 \
                    -c {input.db} \
                    --skip-SNV-profiling \
                    --overwrite-output-destinations \
                    -o {temp_dir}/out

                    scp {temp_dir}/out/* {prof_dir}/.
                  """)

        lambda wildcards: expand(map_dir + "{bin_sample}/mapping/{bin_sample}_{abund_sample}.bam",
               abund_sample=bin_config[wildcards.bin_sample],
               bin_sample=wildcards.bin_sample)

rule anvi_merge:
    input:
        profiles = lambda wildcards: expand(rules.anvi_profile.output.prof,
                                            bin_sample=wildcards.bin_sample,
                                            abund_sample=bin_config[wildcards.bin_sample]),
        db = rules.anvi_gen_contigs_database.output.db,
        centrifuge = rules.anvi_run_centrifuge.output.hits,
        hmm_done = rules.anvi_run_hmms.output.done
    output:        
        aux = anvio_dir + "{bin_sample}/SAMPLES_MERGED/AUXILIARY-DATA.h5",
        prof = anvio_dir + "{bin_sample}/SAMPLES_MERGED/PROFILE.db",
        runlog = anvio_dir + "{bin_sample}/SAMPLES_MERGED/RUNLOG.txt",
        samps = anvio_dir + "{bin_sample}/SAMPLES_MERGED/SAMPLES.db"
    log:
        anvio_dir + "logs/anvi_merge.sample_{bin_sample}.log"
    benchmark:
        "benchmarks/anvio/anvi_merge.sample_{bin_sample}.txt"
    params:
        env = config['envs']['anvio']
    run:
        with tempfile.TemporaryDirectory(dir=find_local_scratch(TMP_DIR_ROOT)) as temp_dir:
            merge_dir = os.path.dirname(output.prof)
            shell("""
                    set +u; {params.env}; set -u

                    anvi-merge {input.profiles} \
                    -o {temp_dir}/SAMPLES_MERGED \
                    -c {input.db} \
                    -W

                    scp -r {temp_dir}/SAMPLES_MERGED/* {merge_dir}/.
                  """)


rule anvi_add_maxbin:
    input:
        bins = rules.summarize_maxbin.output.bins,
        prof = rules.anvi_merge.output.prof,
        db = rules.anvi_gen_contigs_database.output.db
    output:
        done = touch(anvio_dir + "{bin_sample}/{bin_sample}.db.anvi_add_maxbin.done")
    log:
        anvio_dir + "logs/anvi_add_maxbin.sample_{bin_sample}.log"
    benchmark:
        "benchmarks/anvio/anvi_add_maxbin.sample_{bin_sample}.txt"
    params:
        env = config['envs']['anvio']
    run:
        shell("""
                set +u; {params.env}; set -u

                anvi-import-collection -p {input.prof} \
                -c {input.db} \
                -C "MaxBin2" \
                --contigs-mode \
                {input.bins}
              """)


rule anvi_summarize:
    input:
        prof = rules.anvi_merge.output.prof,
        db = rules.anvi_gen_contigs_database.output.db
    output:
        tar = anvio_dir + "{bin_sample}/{bin_sample}_samples-summary_CONCOCT.tar.gz",
        report = anvio_dir + "{bin_sample}/{bin_sample}_samples-summary_CONCOCT.html",
        txt = anvio_dir + "{bin_sample}/{bin_sample}_samples-summary_CONCOCT.txt"
    log:
        anvio_dir + "logs/anvi_summarize.sample_{bin_sample}.log"
    benchmark:
        "benchmarks/anvio/anvi_summarize.sample_{bin_sample}.txt"
    params:
        env = config['envs']['anvio']
    run:
        with tempfile.TemporaryDirectory(dir=find_local_scratch(TMP_DIR_ROOT)) as temp_dir:
            shell("""
                    set +u; {params.env}; set -u

                    anvi-summarize -p {input.prof} \
                    -c {input.db} \
                    -o {temp_dir}/{wildcards.bin_sample}_samples-summary_CONCOCT \
                    -C CONCOCT

                    scp {temp_dir}/{wildcards.bin_sample}_samples-summary_CONCOCT/general_bins_summary.txt {output.txt}
                    scp {temp_dir}/{wildcards.bin_sample}_samples-summary_CONCOCT/index.html {output.report}
                    
                    tar -czvf {temp_dir}/{wildcards.bin_sample}_samples-summary_CONCOCT.tar.gz {temp_dir}/{wildcards.bin_sample}_samples-summary_CONCOCT

                    scp {temp_dir}/{wildcards.bin_sample}_samples-summary_CONCOCT.tar.gz {output.tar}
                  """)


rule anvio:
    input:
        expand(rules.anvi_summarize.output.tar, bin_sample=bin_config.keys()),
        expand(rules.anvi_add_maxbin.output.done, bin_sample=bin_config.keys())

