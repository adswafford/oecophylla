rule function_combine_metaphlan2:
    """
    Combines MetaPhlan2 output for unified taxonomic profile for Humann2.
    """
    input:
        expand(taxonomy_dir + "{sample}/metaphlan2/{sample}.profile.txt",
               sample=samples)
    output:
        joint_prof = func_dir + "metaphlan2/joined_taxonomic_profile.tsv",
        max_prof = func_dir + "metaphlan2/joined_taxonomic_profile_max.tsv"
    threads:
        1
    params:
        env = config['envs']['humann2']
    log:
        func_dir + "logs/function_combine_metaphlan.log"
    benchmark:
        "benchmarks/function/function_combine_metaphlan.json"
    run:
        with tempfile.TemporaryDirectory(dir=find_local_scratch(TMP_DIR_ROOT)) as temp_dir:
            for file in input:
                shell("cp {0} {1}/.".format(file, temp_dir))
            shell("""
                  set +u; {params.env}; set -u

                  humann2_join_tables --input {temp_dir} \
                  --output {output.joint_prof} 2> {log} 1>&2

                  humann2_reduce_table --input {output.joint_prof} \
                  --output {output.max_prof} --function max \
                  --sort-by level 2>> {log} 1>&2
                  """)


rule function_humann2:
    """
    Runs HUMAnN2 pipeline using general defaults.

    Other HUMAnN2 parameters can be specified as a quoted string in
    PARAMS: HUMANN2: OTHER.
    """
    input:
        forward = qc_dir + "{sample}/filtered/{sample}.R1.trimmed.filtered.fastq.gz",
        reverse = qc_dir + "{sample}/filtered/{sample}.R2.trimmed.filtered.fastq.gz",
        metaphlan_in = func_dir + "metaphlan2/joined_taxonomic_profile_max.tsv"
    output:
        genefamilies = func_dir + "{sample}/humann2/{sample}_genefamilies.tsv",
        pathcoverage = func_dir + "{sample}/humann2/{sample}_pathcoverage.tsv",
        pathabundance = func_dir + "{sample}/humann2/{sample}_pathabundance.tsv"
    params:
        nt_db = config['params']['humann2']["nt_db"],
        aa_db = config['params']['humann2']["aa_db"],
        env = config['envs']['humann2'],
        other = config['params']['humann2']['other']
    threads:
        8
    log:
        func_dir + "logs/function_humann2_{sample}.log"
    benchmark:
        "benchmarks/function/function_humann2_{sample}.json"
    run:
        with tempfile.TemporaryDirectory(dir=TMP_DIR_ROOT) as temp_dir:
            shell("""
                  set +u; {params.env}; set -u

                  zcat {input.forward} {input.reverse} > {temp_dir}/input.fastq

                  humann2 --input {temp_dir}/input.fastq \
                  --output {temp_dir}/{wildcards.sample} \
                  --output-basename {wildcards.sample} \
                  --nucleotide-database {params.nt_db} \
                  --protein-database {params.aa_db} \
                  --taxonomic-profile {input.metaphlan_in} \
                  --o-log {log} \
                  --threads {threads} \
                  {params.other} 2> {log} 1>&2

                  scp {temp_dir}/{wildcards.sample}/{wildcards.sample}_genefamilies.tsv {output.genefamilies}
                  scp {temp_dir}/{wildcards.sample}/{wildcards.sample}_pathcoverage.tsv {output.pathcoverage}
                  scp {temp_dir}/{wildcards.sample}/{wildcards.sample}_pathabundance.tsv {output.pathabundance}
                  """)


rule function_humann2_combine_tables:
    """
    Combines the per-sample normalized tables into a single run-wide table. 

    Because HUMAnN2 takes a directory as input, first copies all the individual
    tables generated in this run to a temp directory and runs on that.
    """
    input:
        lambda wildcards: expand(func_dir + "{sample}/humann2/{sample}_genefamilies.tsv",
               sample=samples),
        lambda wildcards: expand(func_dir + "{sample}/humann2/{sample}_pathcoverage.tsv",
               sample=samples),
        lambda wildcards: expand(func_dir + "{sample}/humann2/{sample}_pathabundance.tsv",
               sample=samples)
    output:
        genefamilies = func_dir + "humann2/genefamilies.biom",
        pathcoverage = func_dir + "humann2/pathcoverage.biom",
        pathabundance = func_dir + "humann2/pathabundance.biom",
        genefamilies_cpm = func_dir + "humann2/genefamilies_cpm.biom",
        pathcoverage_relab = func_dir + "humann2/pathcoverage_relab.biom",
        pathabundance_relab = func_dir + "humann2/pathabundance_relab.biom",
        genefamilies_cpm_strat = func_dir + "humann2/genefamilies_cpm_stratified.biom",
        pathcoverage_relab_strat = func_dir + "humann2/pathcoverage_relab_stratified.biom",
        pathabundance_relab_strat = func_dir + "humann2/pathabundance_relab_stratified.biom",
        genefamilies_cpm_unstrat = func_dir + "humann2/genefamilies_cpm_unstratified.biom",
        pathcoverage_relab_unstrat = func_dir + "humann2/pathcoverage_relab_unstratified.biom",
        pathabundance_relab_unstrat = func_dir + "humann2/pathabundance_relab_unstratified.biom"
    params:
        env = config['envs']['humann2']
    threads:
        2
    log:
        func_dir + "logs/function_humann2_combine_tables.log"
    benchmark:
        "benchmarks/function/function_humann2_combine_tables.json"
    run:
        out_dir = os.path.join(func_dir, "humann2")
        with tempfile.TemporaryDirectory(dir=TMP_DIR_ROOT) as temp_dir:
            shell("""
                  humann2_join_tables --input test_out/humann2/ \
                  --search-subdirectories \
                  --output {temp_dir}/genefamilies.tsv \
                  --file_name genefamilies 2> {log} 1>&2

                  humann2_join_tables --input test_out/humann2/ \
                  --search-subdirectories \
                  --output {temp_dir}/pathcoverage.tsv \
                  --file_name pathcoverage 2>> {log} 1>&2

                  humann2_join_tables --input test_out/humann2/ \
                  --search-subdirectories \
                  --output {temp_dir}/pathabundance.tsv \
                  --file_name pathabundance 2>> {log} 1>&2


                  # normalize
                  humann2_renorm_table \
                  --input test_out/humann2/genefamilies.tsv \
                  --output {temp_dir}/genefamilies_cpm.tsv \
                  --units cpm -s n 2>> {log} 1>&2

                  humann2_renorm_table \
                  --input test_out/humann2/pathcoverage.tsv \
                  --output {temp_dir}/pathcoverage_relab.tsv \
                  --units relab -s n 2>> {log} 1>&2

                  humann2_renorm_table \
                  --input test_out/humann2/pathabundance.tsv \
                  --output {temp_dir}/pathabundance_relab.tsv \
                  --units relab -s n 2>> {log} 1>&2


                  # stratify
                  humann2_split_stratified_table \
                  --input test_out/humann2/genefamilies_cpm.tsv \
                  --output {temp_dir} 2>> {log} 1>&2

                  humann2_split_stratified_table \
                  --input test_out/humann2/pathcoverage_relab.tsv \
                  --output {temp_dir} 2>> {log} 1>&2

                  humann2_split_stratified_table \
                  --input test_out/humann2/pathabundance_relab.tsv \
                  --output {temp_dir} 2>> {log} 1>&2

                  # convert to biom
                  for f in {temp_dir}/*.tsv
                  do
                  fn=$(basename "$f")
                  biom convert -i $f -o {temp_dir}/"${{fn%.*}}".biom --to-hdf5
                  done

                  # copy bioms to output
                  cp {temp_dir}/*.biom {out_dir}/.
                  """)


rule humann2:
    """
    Rule to do Humann2
        - metaphlan2_sample_pe
        - combine_metaphlan
        - humann2_sample_pe
        - humann2_combine_tables
        - humann2_remove_unmapped
        - humann2_split_stratified_tables
    """
    input:
        expand(rules.function_humann2_combine_tables.output, sample=samples)


rule function:
    """
    Rule to do functional profiling of metagenomes.

    Currently only runs HUMANn2
    """
    input:
        rules.humann2.input

