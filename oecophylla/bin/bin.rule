rule bin_make_cov_files:
    input:
        bams = lambda wildcards: expand(rules.map_bowtie2.output.bam,
                                        abund_sample=bin_config[wildcards.bin_sample],
                                        bin_sample=wildcards.bin_sample),
        ref = rules.map_bowtie2_index.input
    output:
        bin_dir + "{bin_sample}/abundance_files/{bin_sample}_abund_files.tar.gz"
    log:
        bin_dir + "logs/bin_make_cov_files.sample_{bin_sample}.log"
    benchmark:
        "benchmarks/bin/bin_make_cov_files.sample_{bin_sample}.txt"
    threads:
        12
    params:
        env = config['envs']['bin']
    run:
        with tempfile.TemporaryDirectory(dir=find_local_scratch(TMP_DIR_ROOT)) as temp_dir:
            out_fp = os.path.abspath(output[0])
            for bam in input.bams:
                fn = os.path.basename(bam).split('.')[0]
                shell("""
                        set +u; {params.env}; set -u;

                        samtools view {bam} --threads {threads} -h | \
                        pileup.sh -Xmx8g out={temp_dir}/{fn}_pileup.txt 2> {log} 1>&2

                        awk '{{print $1"\t"$2}}' {temp_dir}/{fn}_pileup.txt | \
                        grep -v '^#' > {temp_dir}/{fn}_abund.txt
                      """)

            shell("""
                    cd {temp_dir}
                    mkdir {wildcards.bin_sample}_abund_files
                    mv *.txt {wildcards.bin_sample}_abund_files/.
                    tar -czvf {wildcards.bin_sample}_abund_files.tar.gz {wildcards.bin_sample}_abund_files
                    scp {wildcards.bin_sample}_abund_files.tar.gz {out_fp}
                  """)


rule bin_run_maxbin:
    input:
        abund = rules.bin_make_cov_files.output,
        ref = rules.map_bowtie2_index.input
    output: 
        bin_dir + "{bin_sample}/maxbin/{bin_sample}.summary"
    log:
        bin_dir + "logs/bin_run_maxbin.sample_{bin_sample}.log"
    benchmark:
        "benchmarks/bin/bin_run_maxbin.sample_{bin_sample}.txt"
    params:
        maxbin = config['params']['maxbin'],
        env = config['envs']['bin']
    threads:
        12
    run:
        with tempfile.TemporaryDirectory(dir=find_local_scratch(TMP_DIR_ROOT)) as temp_dir:
            out_base = os.path.dirname(output[0])
            if params.maxbin is None:
                params.maxbin = ''
            shell("""
                    set +u; {params.env}; set -u;

                    mkdir {temp_dir}/abund_files
                    tar -xzvf {input.abund} -C {temp_dir}/abund_files --strip-components=1

                    touch {temp_dir}/abund_list.txt

                    for f in {temp_dir}/abund_files/*.txt
                    do
                        echo $f >> {temp_dir}/abund_list.txt
                    done

                    run_MaxBin.pl -contig {input.ref} \
                    -out {temp_dir}/{wildcards.bin_sample} \
                    -abund_list {temp_dir}/abund_list.txt \
                    {params.maxbin} -thread {threads} 2> {log} 1>&2

                    rm -r {temp_dir}/abund_files

                    scp {temp_dir}/* {out_base}/.
                  """)


rule summarize_maxbin:
    input:
        rules.bin_run_maxbin.output
    output:
        bins = bin_dir + "{bin_sample}/maxbin/{bin_sample}_maxbin_bins.txt"
    log:
        bin_dir + "logs/summarize_maxbin.sample_{bin_sample}.log"
    benchmark:
        "benchmarks/bin/summarize_maxbin.sample_{bin_sample}.txt"
    threads:
        1
    run:
        bin_dir = os.path.dirname(input[0])
        bins = ''
        for file in os.listdir(bin_dir):
            if file.endswith(".fasta"):
                bin = 'Bin_' + str(file.split('.')[-2])
                with open(os.path.join(bin_dir, file),'r') as f:
                    for line in f:
                        if line.strip().startswith('>'):
                            name = line.strip()[1:]
                            bins += "{0}\t{1}\n".format(name, bin)

        with open(output[0], 'w') as out:
            out.write(bins)


rule bin_maxbin:
    input:
        expand(rules.summarize_maxbin.output, bin_sample=bin_config.keys())


rule bin:
    input:
        rules.bin_maxbin.input